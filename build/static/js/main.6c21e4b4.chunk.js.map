{"version":3,"sources":["class-components/BadModifyDirectlyExample.js","class-components/BadModifyDirectlyExample2.js","class-components/GoodSetStateExample.js","class-components/BadPrevStateExample.js","class-components/GoodPrevStateExample.js","class-components/BadAsyncExample.js","class-components/GoodAsyncExample.js","class-components/index.js","function-components/BadModifyDirectlyExample.js","function-components/BadModifyDirectlyExample2.js","function-components/GoodUseStateHookExample.js","function-components/BadPrevStateExample.js","function-components/GoodPrevStateExample.js","function-components/BadAsyncExample.js","function-components/GoodAsyncExample.js","function-components/index.js","App.js","serviceWorker.js","index.js"],"names":["BadModifyDirectlyExample","state","colors","addYellow","push","className","this","map","color","index","key","onClick","React","Component","BadModifyDirectlyExample2","GoodSetStateExample","setState","prevState","BadPrevStateExample","isDisabled","toggleButton","toggleButton2Times","i","disabled","GoodPrevStateExample","BadAsyncExample","name","setNameToMatt","alert","GoodAsyncExample","ClassComponentExamples","useState","GoodUseStateHookExample","setColors","setIsDisabled","setName","useEffect","FunctionComponentExamples","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c21e4b4.chunk.js","sourcesContent":["import React from 'react';\n\nexport class BadModifyDirectlyExample extends React.Component {\n  state = {\n    colors: ['red', 'blue', 'green']\n  };\n\n  addYellow = () => this.state.colors.push('yellow');\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"bad\">BAD</span>: Don't modify state directly (push)</h3>\n        <div>\n          My favorite colors are:\n          <ul>\n            {this.state.colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n          </ul>\n        </div>\n        <button onClick={this.addYellow}>Add \"yellow\" to list</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class BadModifyDirectlyExample2 extends React.Component {\n  state = {\n    colors: ['red', 'blue', 'green']\n  };\n\n  addYellow = () => this.state.colors = [...this.state.colors, 'yellow'];\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"bad\">BAD</span>: Don't modify state directly (spread)</h3>\n        <div>\n          My favorite colors are:\n          <ul>\n            {this.state.colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n          </ul>\n        </div>\n        <button onClick={this.addYellow}>Add \"yellow\" to list</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class GoodSetStateExample extends React.Component {\n  state = {\n    colors: ['red', 'blue', 'green']\n  };\n\n  addYellow = () => this.setState(prevState => ({ colors: [...prevState.colors, 'yellow'] }));\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"good\">GOOD</span>: Use the `setState` method</h3>\n        <div>\n          My favorite colors are:\n          <ul>\n            {this.state.colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n          </ul>\n        </div>\n        <button onClick={this.addYellow}>Add \"yellow\" to list</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class BadPrevStateExample extends React.Component {\n  state = {\n    isDisabled: false\n  };\n\n  toggleButton = () => this.setState({ isDisabled: !this.state.isDisabled });\n\n  toggleButton2Times = () => {\n    for (let i = 0; i < 2; i++) {\n      this.toggleButton();\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"bad\">BAD</span>: Don't set state that relies on the previous state without using the function of previous state</h3>\n        <button disabled={this.state.isDisabled}>I'm {this.state.isDisabled ? 'disabled' : 'enabled'}</button>\n        <button onClick={this.toggleButton}>Toggle button state</button>\n        <button onClick={this.toggleButton2Times}>Toggle button state 2 times</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class GoodPrevStateExample extends React.Component {\n  state = {\n    isDisabled: false\n  };\n\n  toggleButton = () => this.setState(prevState => ({ isDisabled: !prevState.isDisabled }));\n\n  toggleButton2Times = () => {\n    for (let i = 0; i < 2; i++) {\n      this.toggleButton();\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"good\">GOOD</span>: When setting state that relies on the previous state, do so as a function of previous state</h3>\n        <button disabled={this.state.isDisabled}>I'm {this.state.isDisabled ? 'disabled' : 'enabled'}</button>\n        <button onClick={this.toggleButton}>Toggle button state</button>\n        <button onClick={this.toggleButton2Times}>Toggle button state 2 times</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class BadAsyncExample extends React.Component {\n  state = {\n    name: 'John'\n  };\n\n  setNameToMatt = () => {\n    this.setState({ name: 'Matt' });\n    alert(`The name is now... ${this.state.name}!`);\n  };\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"bad\">BAD</span>:  Don't forget that setState is asynchronous</h3>\n        <div>\n          My name is {this.state.name}.\n        </div>\n        <button onClick={this.setNameToMatt}>Change name to \"Matt\"</button>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nexport class GoodAsyncExample extends React.Component {\n  state = {\n    name: 'John'\n  };\n\n  setNameToMatt = () => {\n    this.setState(\n      { name: 'Matt' },\n      () => alert(`The name is now... ${this.state.name}!`)\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <h3><span className=\"good\">GOOD</span>: Use the callback method to run code after setState is finished</h3>\n        <div>\n          My name is {this.state.name}.\n        </div>\n        <button onClick={this.setNameToMatt}>Change name to \"Matt\"</button>\n      </>\n    )\n  };\n}\n","import React from 'react';\nimport { BadModifyDirectlyExample } from './BadModifyDirectlyExample';\nimport { BadModifyDirectlyExample2 } from './BadModifyDirectlyExample2';\nimport { GoodSetStateExample } from './GoodSetStateExample';\nimport { BadPrevStateExample } from './BadPrevStateExample';\nimport { GoodPrevStateExample } from './GoodPrevStateExample';\nimport { BadAsyncExample } from './BadAsyncExample';\nimport { GoodAsyncExample } from './GoodAsyncExample';\n\nexport class ClassComponentExamples extends React.Component {\n  render() {\n    return (\n      <>\n        <h2>Class Component Examples</h2>\n        <hr />\n        <BadModifyDirectlyExample />\n        <hr />\n        <BadModifyDirectlyExample2 />\n        <hr />\n        <GoodSetStateExample />\n        <hr />\n        <BadPrevStateExample />\n        <hr />\n        <GoodPrevStateExample />\n        <hr />\n        <BadAsyncExample />\n        <hr />\n        <GoodAsyncExample />\n      </>\n    );\n  }\n}\n","import React, { useState } from 'react';\n\nexport const BadModifyDirectlyExample = () => {\n  const initialState = ['red', 'blue', 'green'];\n  let [colors] = useState(initialState);\n\n  const addYellow = () => colors.push('yellow');\n\n  return (\n    <>\n      <h3><span className=\"bad\">BAD</span>: Don't modify state directly (push)</h3>\n      <div>\n        My favorite colors are:\n        <ul>\n          {colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n        </ul>\n      </div>\n      <button onClick={addYellow}>Add \"yellow\" to list</button>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport const BadModifyDirectlyExample2 = () => {\n  const initialState = ['red', 'blue', 'green'];\n  let [colors] = useState(initialState);\n\n  const addYellow = () => colors = [...colors, 'yellow'];\n\n  return (\n    <>\n      <h3><span className=\"bad\">BAD</span>: Don't modify state directly (spread)</h3>\n      <div>\n        My favorite colors are:\n        <ul>\n          {colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n        </ul>\n      </div>\n      <button onClick={addYellow}>Add \"yellow\" to list</button>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport const GoodUseStateHookExample = () => {\n  const initialState = ['red', 'blue', 'green'];\n  let [colors, setColors] = useState(initialState);\n\n  const addYellow = () => setColors([...colors, 'yellow']);\n\n  return (\n    <>\n      <h3><span className=\"good\">GOOD</span>: Use the setter function returned from useState</h3>\n      <div>\n        My favorite colors are:\n        <ul>\n          {colors.map((color, index) => <li key={`${color}-${index}`}>{color}</li>)}\n        </ul>\n      </div>\n      <button onClick={addYellow}>Add \"yellow\" to list</button>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport const BadPrevStateExample = () => {\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const toggleButton = () => setIsDisabled(!isDisabled);\n\n  const toggleButton2Times = () => {\n    for (let i = 0; i < 2; i++) {\n      toggleButton();\n    }\n  };\n\n  return (\n    <>\n      <h3><span className=\"bad\">BAD</span>: Don't set state that relies on the previous state without using the function of previous state</h3>\n      <button disabled={isDisabled}>I'm {isDisabled ? 'disabled' : 'enabled'}</button>\n      <button onClick={toggleButton}>Toggle button state</button>\n      <button onClick={toggleButton2Times}>Toggle button state 2 times</button>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport const GoodPrevStateExample = () => {\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const toggleButton = () => setIsDisabled(isDisabled => !isDisabled);\n\n  const toggleButton2Times = () => {\n    for (let i = 0; i < 2; i++) {\n      toggleButton();\n    }\n  }\n\n  return (\n    <>\n      <h3><span className=\"good\">GOOD</span>: When setting state that relies on the previous state, do so as a function of previous state</h3>\n      <button disabled={isDisabled}>I'm {isDisabled ? 'disabled' : 'enabled'}</button>\n      <button onClick={toggleButton}>Toggle button state</button>\n      <button onClick={toggleButton2Times}>Toggle button state 2 times</button>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport const BadAsyncExample = () => {\n  const [name, setName] = useState('John');\n\n  const setNameToMatt = () => {\n    setName('Matt');\n    alert(`The name is now... ${name}!`);\n  };\n\n  return (\n    <>\n      <h3><span className=\"bad\">BAD</span>: Don't forget that the useState hook updates state asynchronously</h3>\n      <div>\n        My name is {name}.\n      </div>\n      <button onClick={setNameToMatt}>Change name to \"Matt\"</button>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport const GoodAsyncExample = () => {\n  const [name, setName] = useState('John');\n\n  useEffect(() => {\n    if (name !== 'John') {\n      alert(`The name is now... ${name}!`);\n    }\n  }, [name])\n\n  const setNameToMatt = () => setName('Matt');\n\n  return (\n    <>\n      <h3><span className=\"good\">GOOD</span>: Use the useEffect hook for callbacks after state has changed</h3>\n      <div>\n        My name is {name}.\n      </div>\n      <button onClick={setNameToMatt}>Change name to \"Matt\"</button>\n    </>\n  );\n}\n","import React from 'react';\nimport { BadModifyDirectlyExample } from './BadModifyDirectlyExample';\nimport { BadModifyDirectlyExample2 } from './BadModifyDirectlyExample2';\nimport { GoodUseStateHookExample } from './GoodUseStateHookExample';\nimport { BadPrevStateExample } from './BadPrevStateExample';\nimport { GoodPrevStateExample } from './GoodPrevStateExample';\nimport { BadAsyncExample } from './BadAsyncExample';\nimport { GoodAsyncExample } from './GoodAsyncExample';\n\nexport const FunctionComponentExamples = () => (\n  <>\n    <h2>Function Component Examples</h2>\n    <hr />\n    <BadModifyDirectlyExample />\n    <hr />\n    <BadModifyDirectlyExample2 />\n    <hr />\n    <GoodUseStateHookExample />\n    <hr />\n    <BadPrevStateExample />\n    <hr />\n    <GoodPrevStateExample />\n    <hr />\n    <BadAsyncExample />\n    <hr />\n    <GoodAsyncExample />\n  </>\n);\n","import React from 'react';\nimport { ClassComponentExamples } from './class-components';\nimport { FunctionComponentExamples } from './function-components';\n\nfunction App() {\n  return (\n    <main>\n      <h1>React Component State Demo</h1>\n      <hr />\n      <ClassComponentExamples />\n      <hr />\n      <FunctionComponentExamples />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}